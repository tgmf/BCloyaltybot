import asyncio
import re
import logging
from typing import Tuple, Dict, Any
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError

# Import auth functions (mainly for get_user_info and logging)
from auth import check_admin_access, get_user_info, log_admin_action, refresh_admin_verification
# Import user handlers for shared functions
from content_manager import ContentManager
from user_handlers import show_promo, show_status, start_command
# Import stateless utilities (now in utils)
from utils import (
    check_promos_available, cleanup_chat_messages, log_update, extract_message_components, show_admin_promo_status, update_keyboard_by_action, safe_send_message,
)
from state_manager import StateManager
from keyboard_builder import KeyboardBuilder

logger = logging.getLogger(__name__)

# ===== ADMIN COMMANDS =====

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Login command for admin access - /login {password}"""
    log_update(update, "LOGIN COMMAND")
    
    user_id, username, first_name = get_user_info(update)
    
    state = StateManager.create_state(
        promo_id=0,  # Will be updated after showing first promo
        verified_at=1,  # Initially not verified
        status_message_id=0,  # Will be set when status is sent
        promo_message_id=0  # Will be set when promo is sent
    )
    
    # Parse command arguments
    if not context.args or len(context.args) != 1:
        await show_status(update, state, text=
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/login –ø–∞—Ä–æ–ª—å`",
            parse_mode="Markdown"
        )
        return
    
    provided_password = context.args[0]
    
    try:
        # Get the onboarding password from Google Sheets
        correct_password = await content_manager.get_onboarding_password()
        
        if not correct_password:
            await show_status(update, state, text="‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error("Failed to retrieve onboarding password from Google Sheets")
            return
        
        # Check password
        if provided_password != correct_password:
            await show_status(update, state, text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
            log_admin_action(user_id, username, "LOGIN_FAILED", "incorrect password")
            return
        
        # Password is correct - add user to authorized_users
        success = await content_manager.add_admin_user(user_id)
        
        if success:
            log_admin_action(user_id, username, "LOGIN_SUCCESS", "added to authorized_users")
            
            # Clean up the chat and redirect to /start
            await cleanup_chat_messages(update)
            await start_command(update, context, content_manager)
        else:
            await show_status(update, state, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"Failed to add admin user {user_id} to authorized_users")
            
    except Exception as e:
        logger.error(f"Error in login command: {e}")
        await show_status(update, state, text="‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Logout command - removes admin privileges by deleting from database
    Usage: /logout or /logout {user_id}"""
    log_update(update, "LOGOUT COMMAND")
    
    user_id, username, first_name = get_user_info(update)
    
    state = StateManager.create_state(
        promo_id=0,  # Will be updated after showing first promo
        verified_at=1,  # Initially not verified
        status_message_id=0,  # Will be set when status is sent
        promo_message_id=0  # Will be set when promo is sent
    )
    
    # Check if user is currently admin
    if not await check_admin_access(content_manager, user_id, username):
        await show_status(update, state, text="‚ùå –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    
    # Parse target user_id (default to self)
    target_user_id = user_id  # Default to current user
    target_user_str = "self"
    
    if context.args:
        if len(context.args) != 1:
            await show_status(
                update,
                state,
                text=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/logout` –∏–ª–∏ `/logout {user_id}`"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            target_user_str = f"user {target_user_id}"
        except ValueError:
            await show_status(
                update,
                state,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
            )
            return
    
    # Check if target user is actually admin
    if not await check_admin_access(content_manager, target_user_id):
        await show_status(
            update,
            state,
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return
    
    # Remove user from authorized_users database
    success = await content_manager.remove_admin_user(target_user_id)
    
    if success:
        if target_user_id == user_id:
            # Self logout
            log_admin_action(user_id, username, "LOGOUT_SELF", "removed from authorized_users database")
            
            # Clean up and redirect to user experience
            await cleanup_chat_messages(update)
            await start_command(update, context, content_manager)
        else:
            # Logout another admin
            log_admin_action(user_id, username, "LOGOUT_OTHER", f"removed user_id={target_user_id} from authorized_users")

            await show_status(
                update,
                state,
                text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
                     "–û–Ω –±–æ–ª—å—à–µ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç "
                     "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /login —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞."
            )
    else:
        await show_status(
            update,
            state,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ {target_user_str}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ===== INLINE ADMIN HANDLERS =====

async def toggle_view_mode_inline(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Toggle between 'active only' and 'show all' modes"""
    log_update(update, "TOGGLE VIEW MODE")
    await content_manager.refresh_cache()
    query = update.callback_query
    await query.answer()
    
    # Decode state from callback
    action, state = StateManager.decode_callback_data(query.data)
    
    # Toggle the mode
    new_show_all_mode = not state.show_all_mode
    updated_state = StateManager.update_state(state, show_all_mode=new_show_all_mode)
    
    user_id, username, _ = get_user_info(update)
    
    # Log the action
    mode_from = "all" if state.show_all_mode else "active"
    mode_to = "all" if new_show_all_mode else "active"
    log_admin_action(user_id, username, "TOGGLE_VIEW_MODE", f"{mode_from} ‚Üí {mode_to}")
    
    # Show status notification
    if new_show_all_mode:
        status_text = "üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –í–°–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    else:
        status_text = "üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Ç–æ–ª—å–∫–æ –ê–ö–¢–ò–í–ù–´–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    
    await show_status(update, updated_state, status_text)
    
    # Find appropriate promo to show in new mode
    updated_state = await check_promos_available(update, updated_state, content_manager, preserve_position=True)
    
    if updated_state:
        # Show promo with updated state and keyboard
        await show_promo(update, context, content_manager, action, updated_state)
        
        # Wait 3 seconds, then show detailed admin status
        await asyncio.sleep(3)
        await show_admin_promo_status(update, updated_state, content_manager)

async def toggle_promo_status_inline(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Toggle promo status and update current message"""
    await content_manager.refresh_cache(True)
    query = update.callback_query
    action, state = StateManager.decode_callback_data(query.data)
    logger.info(f"TOGGLE PROMO STATUS: action={action}, state={state}")
    
    promo_id = state.promo_id
    
    # Get all promos to find current promo
    promos = content_manager.get_all_promos()
    
    promo = next((p for p in promos if int(p["id"]) == promo_id), None)
    if not promo:
        await show_status(update, state, text=f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        state = await check_promos_available(update, state, content_manager, preserve_position=True)
        if state:
            await show_promo(update, context, content_manager, action, state)
        return
    
    old_status = promo["status"]
    new_status = "inactive" if old_status == "active" else "active"
    
    user_id, username, _ = get_user_info(update)
    
    if await content_manager.update_promo_status(promo_id, new_status):
        log_admin_action(user_id, username, "TOGGLE_PROMO", f"promo_id={promo_id}, {old_status}‚Üí{new_status}")
        
        # Always stay on the current promo regardless of new status or mode
        # show_promo can handle any promo (active/inactive/draft)
        await show_promo(update, context, content_manager, action, state)
        
        # Show rich admin status with updated information
        await show_admin_promo_status(update, state, content_manager)
        
    else:
        # DB error - show error message and find fallback promo
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id}"
        await show_status(update, state, error_msg)
        
        # Find fallback promo and show it
        state = await check_promos_available(update, state, content_manager, preserve_position=True)
        if state:
            await show_promo(update, context, content_manager, action, state)

async def delete_promo_inline(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Delete promo with confirmation"""
    # Force refresh cache to get latest data
    
    query = update.callback_query
    action, state = StateManager.decode_callback_data(query.data)

    show_status(update, state, "üóëÔ∏è –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–∏—é...")
    await content_manager.refresh_cache(True)
    
    promo_id = state.promo_id
    
    # Check if promo still exists
    promos = content_manager.get_all_promos()
    promo = next((p for p in promos if int(p["id"]) == promo_id), None)
    if not promo:
        await show_status(update, state, f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # Find next available promo to show
        state = await check_promos_available(update, state, content_manager, preserve_position=True)
        
        if state:
            await show_promo(update, context, content_manager, action, state)
        return
    
    # Show confirmation in status message (text only)
    confirmation_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    await show_status(update, state, confirmation_text)
    
    # Show current promo with confirmation keyboard
    await update_keyboard_by_action(update, query, action, state, content_manager)

async def confirm_delete_promo(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Confirm and execute promo deletion"""
    query = update.callback_query
    action, state = StateManager.decode_callback_data(query.data)

    show_status(update, state, "üóëÔ∏è –£–¥–∞–ª—è–µ–º...")
    await content_manager.refresh_cache(True)
    
    promo_id = state.promo_id
    
    user_id, username, _ = get_user_info(update)
    
    if await content_manager.delete_promo(promo_id):
        log_admin_action(user_id, username, "DELETE_PROMO", f"promo_id={promo_id}")
        
        # Show success status message
        success_msg = f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id} —É–¥–∞–ª–µ–Ω–æ"
        await show_status(update, state, success_msg)

    else:
        # Show error status message
        error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id}"
        await show_status(update, state, error_msg)
        
    # Find available promo to show
    state = await check_promos_available(update, state, content_manager, preserve_position=True)
    
    if state:
        await show_promo(update, context, content_manager, action, state)

async def edit_promo_inline(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Show editing options for specific promo"""
    query = update.callback_query
    await query.answer()
    action, state = StateManager.decode_callback_data(query.data)
    
    promo_id = state.promo_id
    
    # Get the promo data
    all_promos = content_manager.get_all_promos()
    promo = next((p for p in all_promos if p["id"] == promo_id), None)
    
    if not promo:
        await show_status(update, state, text=f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    await update_keyboard_by_action(update, query, action, state, content_manager)

    await show_status(update, state, f"üìù –ß—Ç–æ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?")

async def edit_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Handle text editing for specific promo"""
    query = update.callback_query
    await query.answer()
    action, state = StateManager.decode_callback_data(query.data)
    promo_id = state.promo_id
    
    await update_keyboard_by_action(update, query, action, state, content_manager)
    
    # Show instruction in status message
    instruction_text = f"üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}, \n*–≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚ÄºÔ∏è"
    await show_status(update, state, instruction_text)
    
    logger.info(f"Text edit mode activated for promo {promo_id}")
    
async def edit_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Handle link editing for specific promo"""
    query = update.callback_query
    await query.answer()
    action, state = StateManager.decode_callback_data(query.data)
    promo_id = state.promo_id
    
    await update_keyboard_by_action(update, query, action, state, content_manager)
    
    # Show instruction in status message
    instruction_text = f"üîó –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}, \n*–≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚ÄºÔ∏è"
    await show_status(update, state, instruction_text)

    logger.info(f"Link edit mode activated for promo {promo_id}")

async def edit_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Handle image editing for specific promo"""
    query = update.callback_query
    await query.answer()
    action, state = StateManager.decode_callback_data(query.data)
    promo_id = state.promo_id
    
    await update_keyboard_by_action(update, query, action, state, content_manager)
    
    # Show instruction in status message
    instruction_text = f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}, \n*–≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚ÄºÔ∏è"
    await show_status(update, state, instruction_text)

    logger.info(f"Image edit mode activated for promo {promo_id}")

async def edit_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Admin: Handle complete promo replacement"""
    query = update.callback_query
    await query.answer()
    action, state = StateManager.decode_callback_data(query.data)
    promo_id = state.promo_id
    
    await update_keyboard_by_action(update, query, action, state, content_manager)
    
    # Show instruction in status message
    instruction_text = f"üîÑ –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}, \n*–≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* ‚ÄºÔ∏è"
    await show_status(update, state, instruction_text)

    logger.info(f"Complete edit mode activated for promo {promo_id}")

async def back_to_promo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Handle back to promo button"""
    log_update(update, "BACK TO PROMO")
    
    query = update.callback_query
    await query.answer()
    
    # Decode state from callback
    action, state = StateManager.decode_callback_data(query.data)
    
    # Return to promo view
    await update_keyboard_by_action(update, query, action, state, content_manager)
    await show_admin_promo_status(update, state, content_manager)

# ===== MESSAGE CREATION AND EDITING =====

async def admin_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager: ContentManager):
    """Handle new message from admin (create promo as draft immediately)"""
    log_update(update, "ADMIN MESSAGE HANDLER")
    
    user_id, username, _ = get_user_info(update)
    
    # Create state with admin verification
    state = StateManager.create_state(
        promo_id=0,  # Will be updated after saving
        verified_at=1, # Will be updated after verification
        status_message_id=0,  # Will be updated after cleanup
        promo_message_id=0   # Will be updated after showing promo
    )
    
    # Get current state (admin should have verified_at > 0)
    state = await refresh_admin_verification(state, content_manager, user_id, username)

    # Check if user has admin access after verification  
    if state.verified_at == 0:
        # Redirecting non-admin user to /start
        logger.info("Non-admin user sent message, redirecting to /start")
        await start_command(update, context, content_manager)
        return

    # Check for edit mode by looking at previous messages
    edit_mode, promo_id = await detect_edit_mode(update)
    logger.info(f"Detected edit_mode={edit_mode}, promo_id={promo_id}")
    components = extract_message_components(update.message)

    if promo_id == 0:
        # CREATE NEW PROMO
        promo_id = await content_manager.add_promo(
            text=components["text"],
            image_file_id=components["image_file_id"], 
            link=components["link"],
            created_by=str(user_id)
        )
        
        init_text = "üìù –ì–æ—Ç–æ–≤–∏–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        status_text = "üìÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫"
        action = "adminPreview"
        log_action = "CREATE_DRAFT"
        
    else:
        # EDIT EXISTING PROMO
        await content_manager.refresh_cache(True)
        update_data = build_update_data(edit_mode, components)
        if await content_manager.update_promo(promo_id, **update_data):
            # Success path
            init_text = "‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            status_text = f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ({edit_mode})"
            action = "adminEdit"
            log_action = f"EDIT_PROMO_{edit_mode.upper()}"
        else:
            # Error path
            init_text = "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            status_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {promo_id}"
            state = await check_promos_available(update, state, content_manager, preserve_position=True)
            action = "backToPromo"
            log_action = f"EDIT_PROMO_{edit_mode.upper()}_FAILED"
    
    await cleanup_chat_messages(update)
    
    # Common flow for both
    logger.info(f"Action: {log_action}, promo_id: {promo_id}")
    response = await safe_send_message(update, text=init_text)
    promo_message_id = response.message_id if response else 0
    
    state = await show_status(update, state, status_text)
    state = StateManager.update_state(state, promo_id=promo_id, promo_message_id=promo_message_id)
    
    await show_promo(update, context, content_manager, action, state)
    
    log_admin_action(user_id, username, log_action, f"promo_id={promo_id}")
    
def build_update_data(edit_mode: str, components: Dict[str, str]) -> Dict[str, str]:
    """Build update data based on edit mode and message components"""
    
    if edit_mode == "text":
        return {"text": components["text"]}
    
    elif edit_mode == "link":
        return {"link": components["link"]}
    
    elif edit_mode == "image":
        return {"image_file_id": components["image_file_id"]}
    
    elif edit_mode == "all":
        return components  # Replace everything, including with empty strings
    
    else:
        logger.warning(f"Unknown edit_mode: {edit_mode}")
        return {}
    
async def detect_edit_mode(update: Update) -> Tuple[str, int]:
    """
    Detect edit mode by checking if message is a reply to instruction
    Much more efficient than forwarding messages - 0 API calls!
    
    Returns: (edit_mode, promo_id) or ("", 0) if not in edit mode
    
    Patterns to match in replied-to message:
    - "üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}"
    - "üîó –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}"
    - "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}"
    - "üîÑ –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {promo_id}"
    """
    try:
        # Check if this message is a reply
        if not update.message.reply_to_message:
            logger.debug("Message is not a reply - no edit mode detected")
            return ("", 0)
        
        reply_msg = update.message.reply_to_message
        text = reply_msg.text or reply_msg.caption or ""
        
        # Define patterns for each edit mode
        patterns = {
            "text": r"üìù –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (\d+)",
            "link": r"üîó –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (\d+)",
            "image": r"üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (\d+)",
            "all": r"üîÑ –û—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (\d+)"
        }
        
        # Check each pattern
        for mode, pattern in patterns.items():
            match = re.search(pattern, text)
            if match:
                promo_id = int(match.group(1))
                logger.info(f"Detected edit mode via reply: {mode}, promo_id: {promo_id}")
                return (mode, promo_id)
        
        logger.debug(f"Reply message doesn't match edit patterns: {text[:50]}...")
        return ("", 0)
        
    except Exception as e:
        logger.error(f"Error in detect_edit_mode: {e}")
        return ("", 0)

# ===== MAIN ADMIN CALLBACK HANDLER =====

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, content_manager):
    """Handle admin callback queries"""
    log_update(update, "ADMIN CALLBACK HANDLER")
    
    chat_id = update.effective_chat.id
    bot = update.get_bot()
    await bot.send_chat_action(chat_id=chat_id, action="typing")  # Fire and forget
    query = update.callback_query
    await query.answer()
    
    user_id, username, _ = get_user_info(update)
    data = query.data
    
    logger.info(f"ADMIN CALLBACK: user_id={user_id}, data={data}")
    
    # Decode callback data
    action, state = StateManager.decode_callback_data(data)
    
    # Check admin access (stateless)
    state = await refresh_admin_verification(state, content_manager, user_id, username)
    if state.verified_at == 0:
        await show_status(update, text="üîê –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # Route to appropriate handler
    if action == "adminPublish":
        await toggle_promo_status_inline(update, context, content_manager)
        logger.info(f"Admin {user_id} published promo {state.promo_id}")
    elif action == "adminView":
        await toggle_view_mode_inline(update, context, content_manager)
    elif action == "confirmDelete":
        await confirm_delete_promo(update, context, content_manager)
    elif action == "adminEdit":
        await edit_promo_inline(update, context, content_manager)
    elif action == "adminToggle":
        await toggle_promo_status_inline(update, context, content_manager)
    elif action == "adminDelete":
        await delete_promo_inline(update, context, content_manager)
    elif action == "editText":
        await edit_text_handler(update, context, content_manager)
    elif action == "editImage":
        await edit_image_handler(update, context, content_manager)
    elif action == "editLink":
        await edit_link_handler(update, context, content_manager)
    elif action == "editAll":
        await edit_all_handler(update, context, content_manager)
    else:
        logger.warning(f"Unknown admin callback action: {action}")